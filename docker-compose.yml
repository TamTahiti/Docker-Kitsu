x-zou-build: &zou-build
    image: zou:${ZOU_VERSION:-latest}
    build:
        context: ./zou
        args:
            ZOU_VERSION: ${ZOU_VERSION:-latest}

x-base: &base
    restart: unless-stopped
    networks:
        - internal

x-env: &env
    env_file:
        - ${ENV_FILE:-./.env}

x-backend-volumes: &backend_volumes
    volumes:
        - 'previews:${PREVIEW_FOLDER:-/opt/zou/previews}'
        - 'tmp:${TMP_DIR:-/tmp/zou}'

services:
    kitsu:
        <<: [ *base, *env ]
        container_name: ${COMPOSE_PROJECT_NAME:?}-kitsu
        image: kitsu:${KITSU_VERSION:-latest}
        build:
            context: ./kitsu
            args:
                KITSU_VERSION: ${KITSU_VERSION:-latest}
        depends_on:
            - zou-app
            - zou-event
            - zou-jobs
        ports:
            - '8800:80'

    zou-app:
        <<: [ *base, *env, *backend_volumes, *zou-build ]
        container_name: ${COMPOSE_PROJECT_NAME:?}-zou-app
        depends_on:
            - db
            #- indexer
        command: "gunicorn --error-logfile - --access-logfile - -w 3 -k gevent -b :5000 zou.app:app"

    zou-event:
        <<: [ *base, *env, *zou-build ]
        container_name: ${COMPOSE_PROJECT_NAME:?}-zou-event
        depends_on:
            - redis
        command: "gunicorn --error-logfile - --access-logfile - -w 1 -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -b :5001 zou.event_stream:app"

    zou-jobs:
        <<: [ *base, *env, *backend_volumes, *zou-build ]
        container_name: ${COMPOSE_PROJECT_NAME:?}-zou-jobs
        command: "rq worker -c zou.job_settings"

    db:
        <<: *base
        container_name: ${COMPOSE_PROJECT_NAME:?}-db-${DB_VERSION:?}
        image: postgres:${DB_VERSION:?}-alpine
        volumes:
            - 'db:/var/lib/postgresql/data'
            - ./pg_ctl.conf:/etc/postgresql/${DB_VERSION:?}/main/pg_ctl.conf:ro
        environment:
            - POSTGRES_PASSWORD=${DB_PASSWORD:?}

    redis:
        <<: *base
        container_name: ${COMPOSE_PROJECT_NAME:?}-redis
        image: redis:alpine
        volumes:
            - 'redis:/data'

#    indexer:
#        <<: *base
#        container_name: ${COMPOSE_PROJECT_NAME:?}-indexer
#        image: getmeili/meilisearch:${INDEXER_VERSION:?}
#        volumes:
#            - 'indexer:/meili_data'
#        environment:
#            - MEILI_MASTER_KEY=${INDEXER_KEY:?}
#        ports:
#            - "7700:7700"

volumes:
    db:
        name: ${COMPOSE_PROJECT_NAME:?}-db-${DB_VERSION:?}
    redis:
        name: ${COMPOSE_PROJECT_NAME:?}-redis
    previews:
        name: ${COMPOSE_PROJECT_NAME:?}-previews
    tmp:
        name: ${COMPOSE_PROJECT_NAME:?}-tmp
#    indexer:
#        name: ${COMPOSE_PROJECT_NAME:?}-indexer

networks:
    internal:
        name: ${COMPOSE_PROJECT_NAME:?}-internal
